#include <fstream>
#include <vector>
#include <cmath>
using namespace std;
ifstream cin("prime1.in");
ofstream cout("prime1.out");

bool ciur[10000001];

unsigned int prim[664580];

unsigned long long f[11]={2,3,5,13,89,233,1597,28657,514229,433494437,2971215073};

bool cautbin(unsigned int a)
{
  int l=0,r=10;
  while(l<=r)
  {
    int m=(l+r)/2;
    if(f[m]==a)
    {
      return true;
    }
    if(f[m]>a)
    {
      r=m-1;
    }
    else l=m+1;
  }
  return false;
}

void ciurul()
{
  ciur[0]=ciur[1]=1;
  unsigned int e=0;
  for(unsigned int i=2;i*i<=10000000;i++)
  {
    if(ciur[i]==0)
    {
      for(unsigned int d=2*i;d<=10000000;d+=i)
      {
        ciur[d]=1;
      }
    }
  }
  for(int i=2;i<=10000000;i++)
  {
    if(ciur[i]==0)
    {
      prim[++e]=i;
    }
  }
}
int desc(long long a)
{
  unsigned int i=1,nrptsc=0;
    while(prim[i]*prim[i]<=a&&a!=1&&i<664579)
    {
        unsigned int nr=0;
        while(a%prim[i]==0)
        {
          a/=prim[i];
          nr++;
        }
        if(nr>1)
        {
          nrptsc+=int(log10(prim[i])+1)+int(log10(nr)+1);
        }
        else if(nr==1)
        {
          nrptsc+=int(log10(prim[i])+1);
        }
        i++;
    }
    if(a>1)
    {
      nrptsc+=int(log10(a)+1);
    }
    return nrptsc;
}
vector<long long>v;
int main()
{
    ciurul();
    unsigned int cer,n,nrfprim=0,nreg=0;
    cin>>cer;
    cin>>n;
    v.resize(n);
    unsigned int cnt=n;
    for(auto&i:v)
    {
      cin>>i;
      if(cer==1)
      {
          if(cautbin(i)==true)
          {
            nrfprim++;
          }
      }
      else if(cer==2)
      {
        if(desc(i)<int(log10(i)+1))
        {
            nreg++;
        }
      }
      else if(cer==3)
      {
        if(i>3&&i%2==0)
        {
            cnt--;
        }
        else if(ciur[i-2]==0&&i>3)
        {
            cnt--;
        }
      }
    }
    if(cer==1) cout<<nrfprim;
    if(cer==2) cout<<nreg;
    else if(cer==3) cout<<cnt;
    return 0;
}
